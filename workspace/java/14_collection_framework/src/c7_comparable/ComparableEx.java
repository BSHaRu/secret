package c7_comparable;

import java.util.*;

public class ComparableEx {

	public static void main(String[] args) {
		TreeSet<Integer> intSet = new TreeSet<>();
		intSet.add(50);	// 50 == 50 , 50 = 0이면 이동하지 않음
		intSet.add(70);	// 기존값(50) < 현재값(70) ? -1 :(기존값 == 현재값) ? 0 : 1;
						// -> 현재값이 크면 -1반환, 같으면 0을 반환, 기존값이 크면 1을 반환
						// => 0이거나 음수면 위치 안바꿈 ==> [50, 70]
		intSet.add(60); // [50, 70, 60] | (0+2)/2 = 1 (바이너리)|  
						// -> 70 < 60 ? -1 : (70 == 60) ? 0 : 1; -> 1을 반환
						// => [50, 60, 70]
						// -> 50 < 60 ? -1 : (50 == 60) ? 0 : 1; -> -1을 반환
						// => [50, 60, 70]
		System.out.println(intSet);
		System.out.println("==========================================");
		
		TreeSet<Person> set = new TreeSet<>();
		set.add(new Person("홍길동",26)); // 26 < 26 ? -1 : (26 == 26) ? 0 : 1; 
										// -> 0을 반환 => 가만히 있음
		
		set.add(new Person("고길동",300)); // [26, 300] | 26 < 300 ? -1 : (26 == 300) ? 0 : 1; 
										// -> -1 반환 => [300, 26] 
		
		set.add(new Person("이순신",30)); // [300, 26, 30] | (0+2)/2 = 1
										// 26 < 30 ? -1 : (26 == 30) ? 0 : 1; 
										// -> -1 반환 => [300, 30, 26]
										// 300 < 30 ? -1 : (300 == 30) ? 0 : 1; 
										// -> 1반환 => [300, 30, 26]
		
		set.add(new Person("김유신",65)); // [300, 30, 26, 65] | (0+3)/2 = 1.5 -> 1
										// 30 < 65 ? -1 : (30 == 65) ? 0 : 1; 
										// -> -1 반환 => [300, 65, 30, 26]
										// -> 여기서 65랑 26이랑은 비교안하는 이유가 30이랑 비교를 먼저했는데 음수가 나왔어
										// 그렇기때문에 우측값은 당연히 30보다 더 작은 수가 있다고 생각하기때문에 26이랑 비교를 안하는거임
										// => 300 < 65 ? -1 : (300 == 65) ? 0 : 1; 
										// -> 1반환 => [300, 65, 30, 26]
		System.out.println(set);
	}

}
